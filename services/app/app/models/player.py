import pprint

from app.models.stats import Stats  # noqa: F401,E501


class Player(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'inventory_id': 'str',
        'room_id': 'str',
        'stats': 'Stats'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'inventory_id': 'inventoryId',
        'room_id': 'roomId',
        'stats': 'stats'
    }

    def __init__(self, id=None, username=None, inventory_id=None, room_id=None, stats=None):  # noqa: E501
        """Player - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._username = None
        self._inventory_id = None
        self._room_id = None
        self._stats = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if inventory_id is not None:
            self.inventory_id = inventory_id
        if room_id is not None:
            self.room_id = room_id
        if stats is not None:
            self.stats = stats

    @property
    def id(self):
        """Gets the id of this Player.  # noqa: E501

        ID of this player  # noqa: E501

        :return: The id of this Player.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Player.

        ID of this player  # noqa: E501

        :param id: The id of this Player.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this Player.  # noqa: E501

        Username of the player  # noqa: E501

        :return: The username of this Player.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Player.

        Username of the player  # noqa: E501

        :param username: The username of this Player.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def inventory_id(self):
        """Gets the inventory_id of this Player.  # noqa: E501

        ID of the player's inventory  # noqa: E501

        :return: The inventory_id of this Player.  # noqa: E501
        :rtype: str
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """Sets the inventory_id of this Player.

        ID of the player's inventory  # noqa: E501

        :param inventory_id: The inventory_id of this Player.  # noqa: E501
        :type: str
        """

        self._inventory_id = inventory_id

    @property
    def room_id(self):
        """Gets the room_id of this Player.  # noqa: E501

        Room the player is in. Null if player is not in a room.  # noqa: E501

        :return: The room_id of this Player.  # noqa: E501
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this Player.

        Room the player is in. Null if player is not in a room.  # noqa: E501

        :param room_id: The room_id of this Player.  # noqa: E501
        :type: str
        """

        self._room_id = room_id

    @property
    def stats(self):
        """Gets the stats of this Player.  # noqa: E501


        :return: The stats of this Player.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Player.


        :param stats: The stats of this Player.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Player, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
