import pprint


class Tile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tile_x': 'int',
        'tile_y': 'int',
        'type': 'str'
    }

    attribute_map = {
        'tile_x': 'tileX',
        'tile_y': 'tileY',
        'type': 'type'
    }

    def __init__(self, tile_x=None, tile_y=None, type=None):  # noqa: E501
        """Tile - a model defined in Swagger"""  # noqa: E501

        self._tile_x = None
        self._tile_y = None
        self._type = None
        self.discriminator = None

        self.tile_x = tile_x
        self.tile_y = tile_y
        self.type = type

    @property
    def tile_x(self):
        """Gets the tile_x of this Tile.  # noqa: E501


        :return: The tile_x of this Tile.  # noqa: E501
        :rtype: int
        """
        return self._tile_x

    @tile_x.setter
    def tile_x(self, tile_x):
        """Sets the tile_x of this Tile.


        :param tile_x: The tile_x of this Tile.  # noqa: E501
        :type: int
        """
        if tile_x is None:
            raise ValueError("Invalid value for `tile_x`, must not be `None`")  # noqa: E501
        if tile_x is not None and tile_x > 100:  # noqa: E501
            raise ValueError("Invalid value for `tile_x`, must be a value less than or equal to `100`")  # noqa: E501
        if tile_x is not None and tile_x < 0:  # noqa: E501
            raise ValueError("Invalid value for `tile_x`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tile_x = tile_x

    @property
    def tile_y(self):
        """Gets the tile_y of this Tile.  # noqa: E501


        :return: The tile_y of this Tile.  # noqa: E501
        :rtype: int
        """
        return self._tile_y

    @tile_y.setter
    def tile_y(self, tile_y):
        """Sets the tile_y of this Tile.


        :param tile_y: The tile_y of this Tile.  # noqa: E501
        :type: int
        """
        if tile_y is None:
            raise ValueError("Invalid value for `tile_y`, must not be `None`")  # noqa: E501
        if tile_y is not None and tile_y > 100:  # noqa: E501
            raise ValueError("Invalid value for `tile_y`, must be a value less than or equal to `100`")  # noqa: E501
        if tile_y is not None and tile_y < 0:  # noqa: E501
            raise ValueError("Invalid value for `tile_y`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tile_y = tile_y

    @property
    def type(self):
        """Gets the type of this Tile.  # noqa: E501


        :return: The type of this Tile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tile.


        :param type: The type of this Tile.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["floor", "wall"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                    .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
