import pprint

from app.models.attribute import Attribute  # noqa: F401,E501
from app.models.location import Location  # noqa: F401,E501
from app.models.stats import Stats  # noqa: F401,E501


class Villain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'villain_template_id': 'str',
        'stats': 'Stats',
        'attributes': 'list[Attribute]',
        'location': 'Location'
    }

    attribute_map = {
        'id': 'id',
        'villain_template_id': 'villainTemplateId',
        'stats': 'stats',
        'attributes': 'attributes',
        'location': 'location'
    }

    def __init__(self, id=None, villain_template_id=None, stats=None, attributes=None, location=None):  # noqa: E501
        """Villain - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._villain_template_id = None
        self._stats = None
        self._attributes = None
        self._location = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if villain_template_id is not None:
            self.villain_template_id = villain_template_id
        if stats is not None:
            self.stats = stats
        if attributes is not None:
            self.attributes = attributes
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this Villain.  # noqa: E501

        Primary key that refers to this instance of this villan.  # noqa: E501

        :return: The id of this Villain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Villain.

        Primary key that refers to this instance of this villan.  # noqa: E501

        :param id: The id of this Villain.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def villain_template_id(self):
        """Gets the villain_template_id of this Villain.  # noqa: E501


        :return: The villain_template_id of this Villain.  # noqa: E501
        :rtype: str
        """
        return self._villain_template_id

    @villain_template_id.setter
    def villain_template_id(self, villain_template_id):
        """Sets the villain_template_id of this Villain.


        :param villain_template_id: The villain_template_id of this Villain.  # noqa: E501
        :type: str
        """

        self._villain_template_id = villain_template_id

    @property
    def stats(self):
        """Gets the stats of this Villain.  # noqa: E501


        :return: The stats of this Villain.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Villain.


        :param stats: The stats of this Villain.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    @property
    def attributes(self):
        """Gets the attributes of this Villain.  # noqa: E501

        List of abilities this villan has.  # noqa: E501

        :return: The attributes of this Villain.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Villain.

        List of abilities this villan has.  # noqa: E501

        :param attributes: The attributes of this Villain.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def location(self):
        """Gets the location of this Villain.  # noqa: E501

        Where in the world space  # noqa: E501

        :return: The location of this Villain.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Villain.

        Where in the world space  # noqa: E501

        :param location: The location of this Villain.  # noqa: E501
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Villain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Villain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
