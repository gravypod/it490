import pprint
from app.models.item_pickup import ItemPickup  # noqa: F401,E501
from app.models.tile import Tile  # noqa: F401,E501
from app.models.villain import Villain  # noqa: F401,E501


class Room(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'player_id': 'str',
        'weather_modifier': 'str',
        'villans': 'list[Villain]',
        'pickups': 'list[ItemPickup]',
        'tiles': 'list[Tile]'
    }

    attribute_map = {
        'id': 'id',
        'player_id': 'playerId',
        'weather_modifier': 'weatherModifier',
        'villans': 'villans',
        'pickups': 'pickups',
        'tiles': 'tiles'
    }

    def __init__(self, id=None, player_id=None, weather_modifier=None, villans=None, pickups=None,
                 tiles=None):  # noqa: E501
        """Room - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._player_id = None
        self._weather_modifier = None
        self._villans = None
        self._pickups = None
        self._tiles = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if player_id is not None:
            self.player_id = player_id
        if weather_modifier is not None:
            self.weather_modifier = weather_modifier
        if villans is not None:
            self.villans = villans
        if pickups is not None:
            self.pickups = pickups
        if tiles is not None:
            self.tiles = tiles

    @property
    def id(self):
        """Gets the id of this Room.  # noqa: E501

        ID of the room  # noqa: E501

        :return: The id of this Room.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Room.

        ID of the room  # noqa: E501

        :param id: The id of this Room.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def player_id(self):
        """Gets the player_id of this Room.  # noqa: E501

        Player that owns this room  # noqa: E501

        :return: The player_id of this Room.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Room.

        Player that owns this room  # noqa: E501

        :param player_id: The player_id of this Room.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    @property
    def weather_modifier(self):
        """Gets the weather_modifier of this Room.  # noqa: E501

        How to modify the atmosphere of the room based on the weather of the player at time it was created. This is used to add extra flavor/emotion to the game.   # noqa: E501

        :return: The weather_modifier of this Room.  # noqa: E501
        :rtype: str
        """
        return self._weather_modifier

    @weather_modifier.setter
    def weather_modifier(self, weather_modifier):
        """Sets the weather_modifier of this Room.

        How to modify the atmosphere of the room based on the weather of the player at time it was created. This is used to add extra flavor/emotion to the game.   # noqa: E501

        :param weather_modifier: The weather_modifier of this Room.  # noqa: E501
        :type: str
        """

        self._weather_modifier = weather_modifier

    @property
    def villans(self):
        """Gets the villans of this Room.  # noqa: E501


        :return: The villans of this Room.  # noqa: E501
        :rtype: list[Villain]
        """
        return self._villans

    @villans.setter
    def villans(self, villans):
        """Sets the villans of this Room.


        :param villans: The villans of this Room.  # noqa: E501
        :type: list[Villain]
        """

        self._villans = villans

    @property
    def pickups(self):
        """Gets the pickups of this Room.  # noqa: E501


        :return: The pickups of this Room.  # noqa: E501
        :rtype: list[ItemPickup]
        """
        return self._pickups

    @pickups.setter
    def pickups(self, pickups):
        """Sets the pickups of this Room.


        :param pickups: The pickups of this Room.  # noqa: E501
        :type: list[ItemPickup]
        """

        self._pickups = pickups

    @property
    def tiles(self):
        """Gets the tiles of this Room.  # noqa: E501


        :return: The tiles of this Room.  # noqa: E501
        :rtype: list[Tile]
        """
        return self._tiles

    @tiles.setter
    def tiles(self, tiles):
        """Sets the tiles of this Room.


        :param tiles: The tiles of this Room.  # noqa: E501
        :type: list[Tile]
        """

        self._tiles = tiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Room, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Room):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
