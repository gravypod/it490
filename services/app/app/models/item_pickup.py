import pprint

from app.models.item_stack import ItemStack  # noqa: F401,E501
from app.models.location import Location  # noqa: F401,E501


class ItemPickup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_stack': 'ItemStack',
        'location': 'Location'
    }

    attribute_map = {
        'item_stack': 'itemStack',
        'location': 'location'
    }

    def __init__(self, item_stack=None, location=None):  # noqa: E501
        """ItemPickup - a model defined in Swagger"""  # noqa: E501

        self._item_stack = None
        self._location = None
        self.discriminator = None

        if item_stack is not None:
            self.item_stack = item_stack
        if location is not None:
            self.location = location

    @property
    def item_stack(self):
        """Gets the item_stack of this ItemPickup.  # noqa: E501


        :return: The item_stack of this ItemPickup.  # noqa: E501
        :rtype: ItemStack
        """
        return self._item_stack

    @item_stack.setter
    def item_stack(self, item_stack):
        """Sets the item_stack of this ItemPickup.


        :param item_stack: The item_stack of this ItemPickup.  # noqa: E501
        :type: ItemStack
        """

        self._item_stack = item_stack

    @property
    def location(self):
        """Gets the location of this ItemPickup.  # noqa: E501


        :return: The location of this ItemPickup.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ItemPickup.


        :param location: The location of this ItemPickup.  # noqa: E501
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemPickup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemPickup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
